Dir
Dir.foreach('.') { puts _1 }
Dir.foreach('lib') { puts _1 }
Dir[File.join(__dir__, 'lib', '*.rb')].each { puts _1 }
Dir[File.join(__dir__, 'lib', '**','*.rb')].each { puts _1 }
exit
Operation
SendPing
Dir[File.join(__dir__, 'lib', '**', '*.rb')].each { puts _1 }
require './lib/send_ping.rb'
SendPint
SendPing
exit
SendPing
exit
SendPing
Dir[File.join(__dir__, 'lib', '**', '*.rb')].each { require_relative _1 }
Dir[File.join(__dir__, 'lib', '**', '*.rb')].each { require_relative _1 }
exit
Dir[File.join(__dir__, 'lib', '**', '*.rb')].each { require_relative _1 }
exit
Dir[File.join(__dir__, 'lib', '**', '*.rb')].each { require_relative _1 }
exit
Dir[File.join(__dir__, 'lib', '**', '*.rb')].each { require_relative _1 }
exit
Dir[File.join(__dir__, 'lib', '**', '*.rb')].each { require_relative _1 }
SendPing
Payslip::Create
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
exit
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
exit
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
exit
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
exit
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
exit
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
exit
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
SendPing
exit
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
exit
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
exit
Payslip::Create.call(employee: 'Joe Bloggs', pay_period: 1..6)
exit
SymbolizeKeys.call()
def hi(one:) = puts one
hi
class Experiment < Operation\
  requires :one, two: 3\
end
Experiment
Experiment.class
Experiment.class_variables
Experiment.required_args
Experiment.default_args
SymbolizeKeys.call(data: { 'one' => 1 })
SymbolizeKeys.call(data: { 'one' => 1, 'two' => { 'nested' => 'string', also: :symbols }})\
SymbolizeKeys.call(data: { 'one' => 1, 'two' => { 'nested' => 'string', also: :symbols }}, deep_symbolize: false)
SymbolizeKeys.call(data: { 'one' => 1, 'two' => { 'nested' => 'string', also: :symbols }})
SymbolizeKeys.call(data: { 'one' => 1, 'two' => { 'nested' => 'string', also: :symbols }}, deep_symbolize: false)
SymbolizeKeys.call(data: { 'one' => 1, 'two' => { 'nested' => 'string', also: :symbols }}, deep_symbolize: true)
exit
